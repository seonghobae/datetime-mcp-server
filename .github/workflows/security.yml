name: Security & Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "0.5.29"
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --frozen

      - name: Run pip-audit
        run: |
          uv add --dev pip-audit
          uv run pip-audit --desc --format=json --output=pip-audit-report.json || true

      - name: Run bandit security scan
        run: |
          uv add --dev bandit[toml]
          uv run bandit -r src/ -f json -o bandit-report.json --severity-level medium || true

      - name: Run safety check
        run: |
          uv add --dev safety
          uv run safety check --json --output safety-report.json || true

      - name: Upload security audit reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-reports
          path: |
            pip-audit-report.json
            bandit-report.json
            safety-report.json

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: security-scan:latest
          cache-from: type=gha

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Docker Scout
        if: github.event_name != 'pull_request'
        uses: docker/scout-action@v1
        with:
          command: cves
          image: security-scan:latest
          only-severities: critical,high
          exit-code: true

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "0.5.29"
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --frozen

      - name: Run code complexity analysis
        run: |
          uv add --dev radon
          uv run radon cc src/ --json > complexity-report.json || true
          uv run radon mi src/ --json > maintainability-report.json || true

      - name: Run dead code detection
        run: |
          uv add --dev vulture
          uv run vulture src/ --json > vulture-report.json || true

      - name: Upload code quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-reports
          path: |
            complexity-report.json
            maintainability-report.json
            vulture-report.json

  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "0.5.29"
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --frozen

      - name: Check license compatibility
        run: |
          uv add --dev pip-licenses
          uv run pip-licenses --format=json --output-file=licenses-report.json || true
          uv run pip-licenses --format=plain || true

      - name: Upload license report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-report
          path: licenses-report.json 